// Generated register defines for eth_idma

#ifndef _ETH_IDMA_REG_DEFS_
#define _ETH_IDMA_REG_DEFS_

#ifdef __cplusplus
extern "C" {
#endif
// Register width
#define ETH_IDMA_PARAM_REG_WIDTH 32

// lower 4 bytes of the devices MAC address
#define ETH_IDMA_MACLO_ADDR_REG_OFFSET 0x0

// upper 2 bytes of the devices MAC address, promiscuous flag, MDIO interface
#define ETH_IDMA_MACHI_MDIO_REG_OFFSET 0x4
#define ETH_IDMA_MACHI_MDIO_UPPER_MAC_ADDRESS_MASK 0xffff
#define ETH_IDMA_MACHI_MDIO_UPPER_MAC_ADDRESS_OFFSET 0
#define ETH_IDMA_MACHI_MDIO_UPPER_MAC_ADDRESS_FIELD \
  ((bitfield_field32_t) { .mask = ETH_IDMA_MACHI_MDIO_UPPER_MAC_ADDRESS_MASK, .index = ETH_IDMA_MACHI_MDIO_UPPER_MAC_ADDRESS_OFFSET })
#define ETH_IDMA_MACHI_MDIO_PROMISCUOUS_BIT 16
#define ETH_IDMA_MACHI_MDIO_PHY_MDCLK_BIT 17
#define ETH_IDMA_MACHI_MDIO_PHY_MDIO_O_BIT 18
#define ETH_IDMA_MACHI_MDIO_PHY_MDIO_OE_BIT 19

// The FCS TX status
#define ETH_IDMA_TX_FCS_REG_OFFSET 0x8

// The FCS RX status
#define ETH_IDMA_RX_FCS_REG_OFFSET 0xc

// Source Address
#define ETH_IDMA_SRC_ADDR_REG_OFFSET 0x10

// Destination Address
#define ETH_IDMA_DST_ADDR_REG_OFFSET 0x14

// Number of bytes
#define ETH_IDMA_LENGTH_REG_OFFSET 0x18

// Source protocol of iDMA
#define ETH_IDMA_SRC_PROTOCOL_REG_OFFSET 0x1c
#define ETH_IDMA_SRC_PROTOCOL_SRC_PROTOCOL_MASK 0x7
#define ETH_IDMA_SRC_PROTOCOL_SRC_PROTOCOL_OFFSET 0
#define ETH_IDMA_SRC_PROTOCOL_SRC_PROTOCOL_FIELD \
  ((bitfield_field32_t) { .mask = ETH_IDMA_SRC_PROTOCOL_SRC_PROTOCOL_MASK, .index = ETH_IDMA_SRC_PROTOCOL_SRC_PROTOCOL_OFFSET })

// Destination protocol of iDMA
#define ETH_IDMA_DST_PROTOCOL_REG_OFFSET 0x20
#define ETH_IDMA_DST_PROTOCOL_DST_PROTOCOL_MASK 0x7
#define ETH_IDMA_DST_PROTOCOL_DST_PROTOCOL_OFFSET 0
#define ETH_IDMA_DST_PROTOCOL_DST_PROTOCOL_FIELD \
  ((bitfield_field32_t) { .mask = ETH_IDMA_DST_PROTOCOL_DST_PROTOCOL_MASK, .index = ETH_IDMA_DST_PROTOCOL_DST_PROTOCOL_OFFSET })

// iDMA transaction ID
#define ETH_IDMA_AXI_ID_REG_OFFSET 0x24
#define ETH_IDMA_AXI_ID_AXI_ID_BIT 0

// src options
#define ETH_IDMA_OPT_SRC_REG_OFFSET 0x28
#define ETH_IDMA_OPT_SRC_BURST_MASK 0x3
#define ETH_IDMA_OPT_SRC_BURST_OFFSET 0
#define ETH_IDMA_OPT_SRC_BURST_FIELD \
  ((bitfield_field32_t) { .mask = ETH_IDMA_OPT_SRC_BURST_MASK, .index = ETH_IDMA_OPT_SRC_BURST_OFFSET })
#define ETH_IDMA_OPT_SRC_CACHE_MASK 0xf
#define ETH_IDMA_OPT_SRC_CACHE_OFFSET 2
#define ETH_IDMA_OPT_SRC_CACHE_FIELD \
  ((bitfield_field32_t) { .mask = ETH_IDMA_OPT_SRC_CACHE_MASK, .index = ETH_IDMA_OPT_SRC_CACHE_OFFSET })
#define ETH_IDMA_OPT_SRC_LOCK_BIT 6
#define ETH_IDMA_OPT_SRC_PROT_MASK 0x7
#define ETH_IDMA_OPT_SRC_PROT_OFFSET 7
#define ETH_IDMA_OPT_SRC_PROT_FIELD \
  ((bitfield_field32_t) { .mask = ETH_IDMA_OPT_SRC_PROT_MASK, .index = ETH_IDMA_OPT_SRC_PROT_OFFSET })
#define ETH_IDMA_OPT_SRC_QOS_MASK 0xf
#define ETH_IDMA_OPT_SRC_QOS_OFFSET 10
#define ETH_IDMA_OPT_SRC_QOS_FIELD \
  ((bitfield_field32_t) { .mask = ETH_IDMA_OPT_SRC_QOS_MASK, .index = ETH_IDMA_OPT_SRC_QOS_OFFSET })
#define ETH_IDMA_OPT_SRC_REGION_MASK 0xf
#define ETH_IDMA_OPT_SRC_REGION_OFFSET 14
#define ETH_IDMA_OPT_SRC_REGION_FIELD \
  ((bitfield_field32_t) { .mask = ETH_IDMA_OPT_SRC_REGION_MASK, .index = ETH_IDMA_OPT_SRC_REGION_OFFSET })

// dst options
#define ETH_IDMA_OPT_DST_REG_OFFSET 0x2c
#define ETH_IDMA_OPT_DST_BURST_MASK 0x3
#define ETH_IDMA_OPT_DST_BURST_OFFSET 0
#define ETH_IDMA_OPT_DST_BURST_FIELD \
  ((bitfield_field32_t) { .mask = ETH_IDMA_OPT_DST_BURST_MASK, .index = ETH_IDMA_OPT_DST_BURST_OFFSET })
#define ETH_IDMA_OPT_DST_CACHE_MASK 0xf
#define ETH_IDMA_OPT_DST_CACHE_OFFSET 2
#define ETH_IDMA_OPT_DST_CACHE_FIELD \
  ((bitfield_field32_t) { .mask = ETH_IDMA_OPT_DST_CACHE_MASK, .index = ETH_IDMA_OPT_DST_CACHE_OFFSET })
#define ETH_IDMA_OPT_DST_LOCK_BIT 6
#define ETH_IDMA_OPT_DST_PROT_MASK 0x7
#define ETH_IDMA_OPT_DST_PROT_OFFSET 7
#define ETH_IDMA_OPT_DST_PROT_FIELD \
  ((bitfield_field32_t) { .mask = ETH_IDMA_OPT_DST_PROT_MASK, .index = ETH_IDMA_OPT_DST_PROT_OFFSET })
#define ETH_IDMA_OPT_DST_QOS_MASK 0xf
#define ETH_IDMA_OPT_DST_QOS_OFFSET 10
#define ETH_IDMA_OPT_DST_QOS_FIELD \
  ((bitfield_field32_t) { .mask = ETH_IDMA_OPT_DST_QOS_MASK, .index = ETH_IDMA_OPT_DST_QOS_OFFSET })
#define ETH_IDMA_OPT_DST_REGION_MASK 0xf
#define ETH_IDMA_OPT_DST_REGION_OFFSET 14
#define ETH_IDMA_OPT_DST_REGION_FIELD \
  ((bitfield_field32_t) { .mask = ETH_IDMA_OPT_DST_REGION_MASK, .index = ETH_IDMA_OPT_DST_REGION_OFFSET })

// backend options
#define ETH_IDMA_BEO_REG_OFFSET 0x30
#define ETH_IDMA_BEO_DECOUPLE_AW_BIT 0
#define ETH_IDMA_BEO_DECOUPLE_RW_BIT 1
#define ETH_IDMA_BEO_SRC_MAX_LLEN_MASK 0x7
#define ETH_IDMA_BEO_SRC_MAX_LLEN_OFFSET 2
#define ETH_IDMA_BEO_SRC_MAX_LLEN_FIELD \
  ((bitfield_field32_t) { .mask = ETH_IDMA_BEO_SRC_MAX_LLEN_MASK, .index = ETH_IDMA_BEO_SRC_MAX_LLEN_OFFSET })
#define ETH_IDMA_BEO_DST_MAX_LLEN_MASK 0x7
#define ETH_IDMA_BEO_DST_MAX_LLEN_OFFSET 5
#define ETH_IDMA_BEO_DST_MAX_LLEN_FIELD \
  ((bitfield_field32_t) { .mask = ETH_IDMA_BEO_DST_MAX_LLEN_MASK, .index = ETH_IDMA_BEO_DST_MAX_LLEN_OFFSET })
#define ETH_IDMA_BEO_SRC_REDUCE_LEN_BIT 8
#define ETH_IDMA_BEO_DST_REDUCE_LEN_BIT 9

// last transfer
#define ETH_IDMA_LAST_REG_OFFSET 0x34
#define ETH_IDMA_LAST_LAST_BIT 0

// idma request valid
#define ETH_IDMA_REQ_VALID_REG_OFFSET 0x38
#define ETH_IDMA_REQ_VALID_REQ_VALID_BIT 0

// idma request ready
#define ETH_IDMA_REQ_READY_REG_OFFSET 0x3c
#define ETH_IDMA_REQ_READY_REQ_READY_BIT 0

// idma response ready
#define ETH_IDMA_RSP_READY_REG_OFFSET 0x40
#define ETH_IDMA_RSP_READY_RSP_READY_BIT 0

// idma response valid
#define ETH_IDMA_RSP_VALID_REG_OFFSET 0x44
#define ETH_IDMA_RSP_VALID_RSP_VALID_BIT 0

#ifdef __cplusplus
}  // extern "C"
#endif
#endif  // _ETH_IDMA_REG_DEFS_
// End generated register defines for eth_idma