// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package eth_idma_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 7;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [31:0] q;
  } eth_idma_reg2hw_maclo_addr_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } upper_mac_address;
    struct packed {
      logic        q;
    } promiscuous;
    struct packed {
      logic        q;
    } phy_mdclk;
    struct packed {
      logic        q;
    } phy_mdio_o;
    struct packed {
      logic        q;
    } phy_mdio_oe;
  } eth_idma_reg2hw_machi_mdio_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } eth_idma_reg2hw_src_addr_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } eth_idma_reg2hw_dst_addr_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } eth_idma_reg2hw_length_reg_t;

  typedef struct packed {
    logic [2:0]  q;
  } eth_idma_reg2hw_src_protocol_reg_t;

  typedef struct packed {
    logic [2:0]  q;
  } eth_idma_reg2hw_dst_protocol_reg_t;

  typedef struct packed {
    logic        q;
  } eth_idma_reg2hw_axi_id_reg_t;

  typedef struct packed {
    struct packed {
      logic [1:0]  q;
    } burst;
    struct packed {
      logic [3:0]  q;
    } cache;
    struct packed {
      logic        q;
    } lock;
    struct packed {
      logic [2:0]  q;
    } prot;
    struct packed {
      logic [3:0]  q;
    } qos;
    struct packed {
      logic [3:0]  q;
    } region;
  } eth_idma_reg2hw_opt_src_reg_t;

  typedef struct packed {
    struct packed {
      logic [1:0]  q;
    } burst;
    struct packed {
      logic [3:0]  q;
    } cache;
    struct packed {
      logic        q;
    } lock;
    struct packed {
      logic [2:0]  q;
    } prot;
    struct packed {
      logic [3:0]  q;
    } qos;
    struct packed {
      logic [3:0]  q;
    } region;
  } eth_idma_reg2hw_opt_dst_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } decouple_aw;
    struct packed {
      logic        q;
    } decouple_rw;
    struct packed {
      logic [2:0]  q;
    } src_max_llen;
    struct packed {
      logic [2:0]  q;
    } dst_max_llen;
    struct packed {
      logic        q;
    } src_reduce_len;
    struct packed {
      logic        q;
    } dst_reduce_len;
  } eth_idma_reg2hw_beo_reg_t;

  typedef struct packed {
    logic        q;
  } eth_idma_reg2hw_last_reg_t;

  typedef struct packed {
    logic        q;
  } eth_idma_reg2hw_req_valid_reg_t;

  typedef struct packed {
    logic        q;
  } eth_idma_reg2hw_req_ready_reg_t;

  typedef struct packed {
    logic        q;
  } eth_idma_reg2hw_rsp_ready_reg_t;

  typedef struct packed {
    logic        q;
  } eth_idma_reg2hw_rsp_valid_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } eth_idma_hw2reg_tx_fcs_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } eth_idma_hw2reg_rx_fcs_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } eth_idma_hw2reg_axi_id_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } eth_idma_hw2reg_last_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } eth_idma_hw2reg_req_ready_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } eth_idma_hw2reg_rsp_valid_reg_t;

  // Register -> HW type
  typedef struct packed {
    eth_idma_reg2hw_maclo_addr_reg_t maclo_addr; // [205:174]
    eth_idma_reg2hw_machi_mdio_reg_t machi_mdio; // [173:154]
    eth_idma_reg2hw_src_addr_reg_t src_addr; // [153:122]
    eth_idma_reg2hw_dst_addr_reg_t dst_addr; // [121:90]
    eth_idma_reg2hw_length_reg_t length; // [89:58]
    eth_idma_reg2hw_src_protocol_reg_t src_protocol; // [57:55]
    eth_idma_reg2hw_dst_protocol_reg_t dst_protocol; // [54:52]
    eth_idma_reg2hw_axi_id_reg_t axi_id; // [51:51]
    eth_idma_reg2hw_opt_src_reg_t opt_src; // [50:33]
    eth_idma_reg2hw_opt_dst_reg_t opt_dst; // [32:15]
    eth_idma_reg2hw_beo_reg_t beo; // [14:5]
    eth_idma_reg2hw_last_reg_t last; // [4:4]
    eth_idma_reg2hw_req_valid_reg_t req_valid; // [3:3]
    eth_idma_reg2hw_req_ready_reg_t req_ready; // [2:2]
    eth_idma_reg2hw_rsp_ready_reg_t rsp_ready; // [1:1]
    eth_idma_reg2hw_rsp_valid_reg_t rsp_valid; // [0:0]
  } eth_idma_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    eth_idma_hw2reg_tx_fcs_reg_t tx_fcs; // [73:41]
    eth_idma_hw2reg_rx_fcs_reg_t rx_fcs; // [40:8]
    eth_idma_hw2reg_axi_id_reg_t axi_id; // [7:6]
    eth_idma_hw2reg_last_reg_t last; // [5:4]
    eth_idma_hw2reg_req_ready_reg_t req_ready; // [3:2]
    eth_idma_hw2reg_rsp_valid_reg_t rsp_valid; // [1:0]
  } eth_idma_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] ETH_IDMA_MACLO_ADDR_OFFSET = 7'h 0;
  parameter logic [BlockAw-1:0] ETH_IDMA_MACHI_MDIO_OFFSET = 7'h 4;
  parameter logic [BlockAw-1:0] ETH_IDMA_TX_FCS_OFFSET = 7'h 8;
  parameter logic [BlockAw-1:0] ETH_IDMA_RX_FCS_OFFSET = 7'h c;
  parameter logic [BlockAw-1:0] ETH_IDMA_SRC_ADDR_OFFSET = 7'h 10;
  parameter logic [BlockAw-1:0] ETH_IDMA_DST_ADDR_OFFSET = 7'h 14;
  parameter logic [BlockAw-1:0] ETH_IDMA_LENGTH_OFFSET = 7'h 18;
  parameter logic [BlockAw-1:0] ETH_IDMA_SRC_PROTOCOL_OFFSET = 7'h 1c;
  parameter logic [BlockAw-1:0] ETH_IDMA_DST_PROTOCOL_OFFSET = 7'h 20;
  parameter logic [BlockAw-1:0] ETH_IDMA_AXI_ID_OFFSET = 7'h 24;
  parameter logic [BlockAw-1:0] ETH_IDMA_OPT_SRC_OFFSET = 7'h 28;
  parameter logic [BlockAw-1:0] ETH_IDMA_OPT_DST_OFFSET = 7'h 2c;
  parameter logic [BlockAw-1:0] ETH_IDMA_BEO_OFFSET = 7'h 30;
  parameter logic [BlockAw-1:0] ETH_IDMA_LAST_OFFSET = 7'h 34;
  parameter logic [BlockAw-1:0] ETH_IDMA_REQ_VALID_OFFSET = 7'h 38;
  parameter logic [BlockAw-1:0] ETH_IDMA_REQ_READY_OFFSET = 7'h 3c;
  parameter logic [BlockAw-1:0] ETH_IDMA_RSP_READY_OFFSET = 7'h 40;
  parameter logic [BlockAw-1:0] ETH_IDMA_RSP_VALID_OFFSET = 7'h 44;

  // Register index
  typedef enum int {
    ETH_IDMA_MACLO_ADDR,
    ETH_IDMA_MACHI_MDIO,
    ETH_IDMA_TX_FCS,
    ETH_IDMA_RX_FCS,
    ETH_IDMA_SRC_ADDR,
    ETH_IDMA_DST_ADDR,
    ETH_IDMA_LENGTH,
    ETH_IDMA_SRC_PROTOCOL,
    ETH_IDMA_DST_PROTOCOL,
    ETH_IDMA_AXI_ID,
    ETH_IDMA_OPT_SRC,
    ETH_IDMA_OPT_DST,
    ETH_IDMA_BEO,
    ETH_IDMA_LAST,
    ETH_IDMA_REQ_VALID,
    ETH_IDMA_REQ_READY,
    ETH_IDMA_RSP_READY,
    ETH_IDMA_RSP_VALID
  } eth_idma_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] ETH_IDMA_PERMIT [18] = '{
    4'b 1111, // index[ 0] ETH_IDMA_MACLO_ADDR
    4'b 0111, // index[ 1] ETH_IDMA_MACHI_MDIO
    4'b 1111, // index[ 2] ETH_IDMA_TX_FCS
    4'b 1111, // index[ 3] ETH_IDMA_RX_FCS
    4'b 1111, // index[ 4] ETH_IDMA_SRC_ADDR
    4'b 1111, // index[ 5] ETH_IDMA_DST_ADDR
    4'b 1111, // index[ 6] ETH_IDMA_LENGTH
    4'b 0001, // index[ 7] ETH_IDMA_SRC_PROTOCOL
    4'b 0001, // index[ 8] ETH_IDMA_DST_PROTOCOL
    4'b 0001, // index[ 9] ETH_IDMA_AXI_ID
    4'b 0111, // index[10] ETH_IDMA_OPT_SRC
    4'b 0111, // index[11] ETH_IDMA_OPT_DST
    4'b 0011, // index[12] ETH_IDMA_BEO
    4'b 0001, // index[13] ETH_IDMA_LAST
    4'b 0001, // index[14] ETH_IDMA_REQ_VALID
    4'b 0001, // index[15] ETH_IDMA_REQ_READY
    4'b 0001, // index[16] ETH_IDMA_RSP_READY
    4'b 0001  // index[17] ETH_IDMA_RSP_VALID
  };

endpackage

